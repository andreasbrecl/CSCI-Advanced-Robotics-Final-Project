// Generated by gencpp from file pololu_maestro_ros/pwm.msg
// DO NOT EDIT!


#ifndef POLOLU_MAESTRO_ROS_MESSAGE_PWM_H
#define POLOLU_MAESTRO_ROS_MESSAGE_PWM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pololu_maestro_ros
{
template <class ContainerAllocator>
struct pwm_
{
  typedef pwm_<ContainerAllocator> Type;

  pwm_()
    : channel(0)
    , target(0)  {
    }
  pwm_(const ContainerAllocator& _alloc)
    : channel(0)
    , target(0)  {
  (void)_alloc;
    }



   typedef uint8_t _channel_type;
  _channel_type channel;

   typedef uint16_t _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::pololu_maestro_ros::pwm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pololu_maestro_ros::pwm_<ContainerAllocator> const> ConstPtr;

}; // struct pwm_

typedef ::pololu_maestro_ros::pwm_<std::allocator<void> > pwm;

typedef boost::shared_ptr< ::pololu_maestro_ros::pwm > pwmPtr;
typedef boost::shared_ptr< ::pololu_maestro_ros::pwm const> pwmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pololu_maestro_ros::pwm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pololu_maestro_ros::pwm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pololu_maestro_ros::pwm_<ContainerAllocator1> & lhs, const ::pololu_maestro_ros::pwm_<ContainerAllocator2> & rhs)
{
  return lhs.channel == rhs.channel &&
    lhs.target == rhs.target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pololu_maestro_ros::pwm_<ContainerAllocator1> & lhs, const ::pololu_maestro_ros::pwm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pololu_maestro_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pololu_maestro_ros::pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pololu_maestro_ros::pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pololu_maestro_ros::pwm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cacdc30924dce4f90463bf4f4695d124";
  }

  static const char* value(const ::pololu_maestro_ros::pwm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcacdc30924dce4f9ULL;
  static const uint64_t static_value2 = 0x0463bf4f4695d124ULL;
};

template<class ContainerAllocator>
struct DataType< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pololu_maestro_ros/pwm";
  }

  static const char* value(const ::pololu_maestro_ros::pwm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 channel\n"
"uint16 target\n"
;
  }

  static const char* value(const ::pololu_maestro_ros::pwm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pwm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pololu_maestro_ros::pwm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pololu_maestro_ros::pwm_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.channel);
    s << indent << "target: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLOLU_MAESTRO_ROS_MESSAGE_PWM_H
